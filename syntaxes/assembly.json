{
    "fileTypes": [
        "asm"
    ],
    "name": "PIC Assembly",
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#expression"
        },
        {
            "match": ".*",
            "name": "invalid.illegal"
        }
    ],
    "repository": {
        "etc": {
            "patterns": [
                {
                    "match": "\\b(?i)(RBP|EBP|BP|CS|DS|ES|FS|GS|SS|RAX|EAX|RBX|EBX|RCX|ECX|RDX|EDX|RCX|RIP|EIP|IP|RSP|ESP|SP|RSI|ESI|SI|RDI|EDI|DI|RFLAGS|EFLAGS|FLAGS|R(8|9|10|11|12|13|14|15)(d|w|b)?|(Y|X)MM([0-9]|10|11|12|13|14|15)|(A|B|C|D)(X|H|L)|CR([0-4]|DR([0-7]|TR6|TR7|EFER)))\\b",
                    "name": "variable.parameter.register.assembly"
                },
                {
                    "match": "(\"|').*?(\"|')",
                    "name": "string.assembly"
                },
                {
                    "begin": "^\\[",
                    "end": "\\]",
                    "name": "support.function.directive.assembly"
                },
                {
                    "captures": {
                        "2": {
                            "name": "entity.name.function.assembly"
                        }
                    },
                    "match": "(^struc) ([_a-zA-Z][_a-zA-Z0-9]*)",
                    "name": "support.function.directive.assembly"
                },
                {
                    "match": "^endstruc",
                    "name": "support.function.directive.assembly"
                },
                {
                    "captures": {
                        "1": {
                            "name": "entity.name.function.assembly"
                        },
                        "2": {
                            "name": "constant.character.assembly"
                        }
                    },
                    "match": "^%macro ([_a-zA-Z][_a-zA-Z0-9]*) ([0-9]+)",
                    "name": "support.function.directive.assembly"
                },
                {
                    "match": "^%endmacro",
                    "name": "support.function.directive.assembly"
                },
                {
                    "captures": {
                        "1": {
                            "name": "support.function.directive.assembly"
                        },
                        "13": {
                            "name": "entity.name.function.assembly"
                        }
                    },
                    "match": "\\s*(?i)(%define|%ifndef|%xdefine|%idefine|%undef|%assign|%defstr|%strcat|%strlen|%substr|%00|%0|%rotate|%rep|%endrep|%include|\\$\\$|\\$|%unmacro|%if|%elif|%else|%endif|%(el)?ifdef|%(el)?ifmacro|%(el)?ifctx|%(el)?ifidn|%(el)?ifidni|%(el)?ifid|%(el)?ifnum|%(el)?ifstr|%(el)?iftoken|%(el)?ifempty|%(el)?ifenv|%pathsearch|%depend|%use|%push|%pop|%repl|%arg|%stacksize|%local|%error|%warning|%fatal|%line|%!|%comment|%endcomment|__NASM_VERSION_ID__|__NASM_VER__|__FILE__|__LINE__|__BITS__|__OUTPUT_FORMAT__|__DATE__|__TIME__|__DATE_NUM__|_TIME__NUM__|__UTC_DATE__|__UTC_TIME__|__UTC_DATE_NUM__|__UTC_TIME_NUM__|__POSIX_TIME__|__PASS__|ISTRUC|AT|IEND|BITS 16|BITS 32|BITS 64|USE16|USE32|__SECT__|ABSOLUTE|EXTERN|GLOBAL|COMMON|CPU|FLOAT)\\b ?([_a-zA-Z][_a-zA-Z0-9]*)?"
                },
                {
                    "match": "\\b(?i)(d(b|w|d|q|t|o|y)|res(b|w|d|q|t|o)|equ|times|align|alignb|sectalign|section|ptr|byte|word|dword|qword|incbin|)\\b",
                    "name": "support.function.directive.assembly"
                },
                {
                    "match": "(,|\\[|\\]|\\+|\\-|\\*)",
                    "name": "source.assembly"
                },
                {
                    "match": "\\w*%%.+?:$",
                    "name": "entity.name.function.assembly"
                },
                {
                    "match": "\\w*%\\$.+?:$",
                    "name": "entity.name.function.assembly"
                },
                {
                    "match": "^\\.?.+?:$",
                    "name": "entity.name.function.assembly"
                },
                {
                    "match": "^\\.?.+?\\b",
                    "name": "entity.name.function.assembly"
                },
                {
                    "match": ".+?",
                    "name": "entity.name.function.assembly"
                }
            ]
        },
        "var": {
            "match": "\\b\\w+\\b",
            "name": "storage.type"
        },
        "constant-unused": {
            "patterns": [
                {
                    "match": "(?i)\\b0[by](?:[01][01_]*)\\.(?:(?:[01][01_]*)?(?:p[+-]?(?:[0-9][0-9_]*))?\\b)?",
                    "name": "constant.numeric.binary.floating-point.asm.x86_64"
                },
                {
                    "match": "(?i)\\b0[by](?:[01][01_]*)(?:p[+-]?(?:[0-9][0-9_]*))\\b",
                    "name": "constant.numeric.binary.floating-point.asm.x86_64"
                },
                {
                    "match": "(?i)\\b0[oq](?:[0-7][0-7_]*)\\.(?:(?:[0-7][0-7_]*)?(?:p[+-]?(?:[0-9][0-9_]*))?\\b)?",
                    "name": "constant.numeric.octal.floating-point.asm.x86_64"
                },
                {
                    "match": "(?i)\\b0[oq](?:[0-7][0-7_]*)(?:p[+-]?(?:[0-9][0-9_]*))\\b",
                    "name": "constant.numeric.octal.floating-point.asm.x86_64"
                },
                {
                    "match": "(?i)\\b(?:0[dt])?(?:[0-9][0-9_]*)\\.(?:(?:[0-9][0-9_]*)?(?:e[+-]?(?:[0-9][0-9_]*))?\\b)?",
                    "name": "constant.numeric.decimal.floating-point.asm.x86_64"
                },
                {
                    "match": "(?i)\\b(?:[0-9][0-9_]*)(?:e[+-]?(?:[0-9][0-9_]*))\\b",
                    "name": "constant.numeric.decimal.floating-point.asm.x86_64"
                },
                {
                    "match": "(?i)\\b0[xh](?:[[:xdigit:]][[:xdigit:]_]*)\\.(?:(?:[[:xdigit:]][[:xdigit:]_]*)?(?:p[+-]?(?:[0-9][0-9_]*))?\\b)?",
                    "name": "constant.numeric.hex.floating-point.asm.x86_64"
                },
                {
                    "match": "(?i)\\b0[xh](?:[[:xdigit:]][[:xdigit:]_]*)(?:p[+-]?(?:[0-9][0-9_]*))\\b",
                    "name": "constant.numeric.hex.floating-point.asm.x86_64"
                },
                {
                    "match": "(?i)\\$[0-9]\\_?(?:[[:xdigit:]][[:xdigit:]_]*)?\\.(?:(?:[[:xdigit:]][[:xdigit:]_]*)?(?:p[+-]?(?:[0-9][0-9_]*))?\\b)?",
                    "name": "constant.numeric.hex.floating-point.asm.x86_64"
                },
                {
                    "match": "(?i)\\$[0-9]\\_?(?:[[:xdigit:]][[:xdigit:]_]*)(?:p[+-]?(?:[0-9][0-9_]*))\\b",
                    "name": "constant.numeric.hex.floating-point.asm.x86_64"
                },
                {
                    "match": "(?i)\\b(?:[0-9][0-9_]*)p(?:[0-9][0-9_]*)?\\b",
                    "name": "constant.numeric.decimal.packed-bcd.asm.x86_64"
                },
                {
                    "match": "(?i)\\b(?:(?:0[by](?:[01][01_]*))|(?:(?:[01][01_]*)[by]))\\b",
                    "name": "constant.numeric.binary.asm.x86_64"
                },
                {
                    "match": "(?i)\\b(?:(?:0[oq](?:[0-7][0-7_]*))|(?:(?:[0-7][0-7_]*)[oq]))\\b",
                    "name": "constant.numeric.octal.asm.x86_64"
                },
                {
                    "match": "(?i)\\b(?:(?:0[dt](?:[0-9][0-9_]*))|(?:(?:[0-9][0-9_]*)[dt]?))\\b",
                    "name": "constant.numeric.decimal.asm.x86_64"
                },
                {
                    "match": "(?i)(?:\\$[0-9]\\_?(?:[[:xdigit:]][[:xdigit:]_]*)?)\\b",
                    "name": "constant.numeric.hex.asm.x86_64"
                },
                {
                    "match": "(?i)\\b(?:(?:0[xh](?:[[:xdigit:]][[:xdigit:]_]*))|(?:(?:[[:xdigit:]][[:xdigit:]_]*)[hxHX]))\\b",
                    "name": "constant.numeric.hex.asm.x86_64"
                }
            ]
        },
        "constant": {
            "patterns": [
                {
                    "match": "(?i)\\bb\\'[01]+\\'",
                    "name": "constant.numeric.binary.asm"
                },
                {
                    "match": "(?i)\\b[d.]\\'[0-9]+\\'",
                    "name": "constant.numeric.decimal.asm"
                },
                {
                    "match": "(?i)\\bh\\'[0-9a-f]+\\'",
                    "name": "constant.numeric.hex.asm"
                },
                {
                    "match": "(?i)\\b0x[0-9a-f]+",
                    "name": "constant.numeric.hex.asm"
                },
                {
                    "match": "(?i)\\bo\\'[0-7]+\\'",
                    "name": "constant.numeric.octal.asm"
                },
                {
                    "match": "(?i)\\ba?\\'[\\S]+\\'",
                    "name": "constant.string.ascii.asm"
                },
                {
                    "match": "(?i)\\b[0-9]+",
                    "name": "constant.numeric.default.asm"
                }
            ]
        },
        "comment": {
            "name": "comment",
            "match": "(\\s)*;.*$"
        },
        "expression": {
            "patterns": [
                {
                    "include": "#expressionEquivalence"
                },
                {
                    "include": "#expressionDirective"
                },
                {
                    "include": "#expression-two"
                },
                {
                    "include": "#expression-one"
                },
                {
                    "include": "#expression-zero"
                }
            ]
        },
        "expressionEquivalence": {
            "match": "^(?i)\\s*(\\w+)\\s+(equ)\\s+([0-9a-zA-Z_\\?\\'\\\"]+)",
            "captures": {
                "1": {
                    "name": "storage.type"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#opcode"
                        }
                    ]
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#constant"
                        },
                        {
                            "include": "#label"
                        }
                    ]
                }
            }
        },
        "expressionDirective": {
            "match": "^(?i)\\s*(org|code)\\s+([0-9a-zA-Z_\\?\\'\\\"]+)",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#opcode"
                        }
                    ]
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#constant"
                        },
                        {
                            "include": "#label"
                        }
                    ]
                }
            }
        },
        "expression-zero": {
            "match": "^(?i)\\s*([\\w]+\\s+)?(end|clrw|nop|clrwdt|retfie|return|sleep)",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#label"
                        }
                    ]
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#opcode"
                        }
                    ]
                }
            }
        },
        "expression-one": {
            "match": "^(?i)\\s*([\\w]+\\s+)?(clrf|movwf|addlw|andlw|call|goto|iorlw|movlw|retlw|sublw|xorlw)\\s+([0-9a-zA-Z_\\?\\'\\\"]+)",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#label"
                        }
                    ]
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#opcode"
                        }
                    ]
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#constant"
                        },
                        {
                            "include": "#label"
                        }
                    ]
                }
            }
        },
        "expression-two": {
            "match": "^(?i)\\s*([\\w]+\\s+)?(addwf|andwf|comf|decf|decfsz|incf|incfsz|iorwf|movf|rlf|rrf|subwf|swapf|xorwf|bcf|bsf|btf|btfsc|btfss)\\s+([0-9a-zA-Z_\\?\\'\\\"]+)\\s*,\\s*([0-9a-zA-Z_\\?\\'\\\"]+)",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#label"
                        }
                    ]
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#opcode"
                        }
                    ]
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#constant"
                        },
                        {
                            "include": "#label"
                        }
                    ]
                },
                "4": {
                    "patterns": [
                        {
                            "include": "#constant"
                        },
                        {
                            "include": "#label"
                        }
                    ]
                }
            }
        },
        "commentOrNone": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "name": "invalid.illegal"
                }
            ]
        },
        "label": {
            "name": "storage.type",
            "match": "\\b[a-zA-Z0-9_\\-]*\\b"
        },
        "opcode": {
            "patterns": [
                {
                    "include": "#opcodeNone"
                },
                {
                    "include": "#opcodeSingle"
                },
                {
                    "include": "#opcodeDouble"
                },
                {
                    "include": "#opcodeSimulator"
                },
                {
                    "include": "#invalidOpcode"
                }
            ]
        },
        "invalidOpcode": {
            "name": "invalid.illegal",
            "match": "\\b[\\w]+\\b"
        },
        "validOpcode": {
            "name": "keyword.operator",
            "match": "\\b(?i)(v)?(addwf|andwf|clrf|clrw|comf|decf|decfsz|incf|incfsz|iorwf|movf|movwf|nop|rlf|rrf|subwf|swapf|xorwf|bcf|bsf|btfsc|btfss|addlw|andlw|call|clrwdt|goto|iorlw|movlw|retfie|retlw|return|sleep|sublw|xorlw)\\b"
        },
        "opcodeNone": {
            "name": "keyword.operator",
            "match": "\\b(?i)(v)?(clrw|nop|clrwdt|retfie|return|sleep)\\b"
        },
        "opcodeSingle": {
            "name": "keyword.operator",
            "match": "\\b(?i)(v)?(clrf|movwf|addlw|andlw|call|goto|iorlw|movlw|retlw|sublw|xorlw)\\b"
        },
        "opcodeDouble": {
            "name": "keyword.operator",
            "match": "\\b(?i)(v)?(addwf|andwf|comf|decf|decfsz|incf|incfsz|iorwf|movf|rlf|rrf|subwf|swapf|xorwf|bcf|bsf|btf|btfsc|btfss)\\b"
        },
        "opcodeSimulator": {
            "name": "keyword.operator",
            "match": "\\b(?i)(org|end|code|equ)\\b"
        }
    },
    "scopeName": "source.assembly",
    "uuid": "b23e10d9-4cfd-4ac0-84e2-5e6845522206"
}